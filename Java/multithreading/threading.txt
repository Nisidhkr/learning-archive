In Java, multithreading is the concurrent execution of
two or more threads to maximize the utilization of the
CPU. Java's multithreading capabilities are part of the
java.lang package, making it easy to implement
concurrent execution.

A thread is a lightweight process, the smallest unit of
processing. Java supports multithreading through its
java.lang.Thread class and the java.lang.Runnable interface.

When a Java program starts, one thread begins running
immediately, which is called the main thread. This thread is
responsible for executing the main method of a program.

o create a new thread in Java, you can either extend the
Thread class or implement the Runnable interface.

• A new class World is created that implements Runnable.
• The run method is overridden to define the code that
constitutes the new thread.
• A Thread object is created by passing an instance of
World.
• start method is called on the Thread object to initiate the
new thread.

The lifecycle of a thread in Java consists of several
states, which a thread can move through during its
execution.

New: A thread is in this state when it is created but not
yet started.
Runnable: After the start method is called, the thread
becomes runnable. It's ready to run and is waiting for
CPU time.
Running: The thread is in this state when it is executing.
Blocked/Waiting: A thread is in this state when it is
waiting for a resource or for another thread to perform
an action.
Terminated: A thread is in this state when it has
finished executing

Invoking yield()
A hint to the scheduler that the current thread is willing to yield its current use of a processor. The
scheduler is free to ignore this hint..

daemon thread are those thread which run on background

A daemon thread in Java is a background thread that runs in support of other tasks, like garbage collection or system monitoring
Low-priority Type of thread that runs in the background and provides support to
other non-daemon threads(user thread) in a program.
setDaemon() method must be called before the thread is started with the start
method or an iligal ThreadStateException will be thrown.

will automatically terminate when all other non-daemon threads in a program
have completéd. This is in contrast to user threads, which will continue to run
until they complete or are explicitly terminated.
The main difference between user thread and daemon thread is that JVM does not
wait for daemon thread to complete before exiting while it do waits for the user thread.